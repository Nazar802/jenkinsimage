jenkins:
  securityRealm:
    local:
      allowsSignup: false
      users:
        - id: ${JENKINS_ADMIN_ID}
          password: ${JENKINS_ADMIN_PASSWORD}

  authorizationStrategy:
    globalMatrix:
      permissions:
        - "Overall/Administer:${JENKINS_ADMIN_ID}"
        - "Overall/Read:authenticated"
  remotingSecurity:
    enabled: true
  
  globalNodeProperties:
  - envVars:
      env:
      - key: "ACR_ADDR"
        value: "${ACR_ADDR}"
      - key: "ACR_PASS"
        value: "${ACR_PASS}"
      - key: "ACR_UID"
        value: "${ACR_UID}"
      - key: "DATASOURCE_PASSWORD"
        value: "${DATASOURCE_PASSWORD}"
      - key: "DATASOURCE_URL"
        value: "${DATASOURCE_URL}"
      - key: "DATASOURCE_USER"
        value: "${DATASOURCE_USER}"
      - key: "JWT_SECRET"
        value: "${JWT_SECRET}"
      - key: "MY_PASSWORD"
        value: "${MY_PASSWORD}"
      - key: "SUBSCRIPTION_ID"
        value: "${SUBSCRIPTION_ID}"
      - key: "VMIP"
        value: "${VMIP}"
      - key: "TELEGRAM_TOKEN"
        value: "${TELEGRAM_TOKEN}"
      - key: "CHAT_ID"
        value: "${CHAT_ID}"
      - key: "SONAR_TOKEN"
        value: "${SONAR_TOKEN}"
      - key: "CI"
        value: "false"
  
security:
  queueItemAuthenticator:
    authenticators:
      - global:
          strategy: triggeringUsersAuthorizationStrategy

credentials:
  system:
    domainCredentials:
      - credentials:
          - basicSSHUserPrivateKey:
              scope: GLOBAL
              id: ssh
              username: azureuser
              description: "SSH passphrase with private key file. Private key provided"
              privateKeySource:
                directEntry:
                  privateKey: "${readFile:${SSH_PRIVATE_FILE_PATH}}"
          - string:
              scope: GLOBAL
              id: chatID
              description: "chatID"
              secret: "${CHAT_ID}"
          - string:
              scope: GLOBAL
              id: telegramToken
              description: "telegramToken"
              secret: "${TELEGRAM_TOKEN}"
          - string:
              scope: GLOBAL
              id: sonar
              description: "sonar"
              secret: "${SONAR_TOKEN}"

unclassified:
  location:
    url: "${JENKINS_RESERVE_URL}"
  
  telegramBotGlobalConfiguration:
    approvalType: MANUAL
    botName: "JenkinsNotify"
    botToken: "${TELEGRAM_TOKEN}"
    shouldLogToConsole: false
  
  throttleJobProperty:
    categories:
    - categoryName: "Lock"
      maxConcurrentPerNode: 1
      maxConcurrentTotal: 1

  sonarGlobalConfiguration:
    buildWrapperEnabled: true
    installations:
    - credentialsId: "sonar"
      name: "SonarQube"
      serverUrl: "${SONAR_SERVER}"
      triggers:
        skipScmCause: false
        skipUpstreamCause: false

  tool:

    dockerTool:
      installations:
      - name: "Docker"
        properties:
        - installSource:
            installers:
            - fromDocker:
                version: "latest"
   
    maven:
      installations:
      - name: "Maven"
        properties:
        - installSource:
            installers:
            - maven:
                id: "3.8.4"

    nodejs:
      installations:
      - name: "NodeJS"
        properties:
        - installSource:
            installers:
            - nodeJSInstaller:
                id: "12.22.8"
                npmPackages: "sonar-scanner"
                npmPackagesRefreshHours: 72

    sonarRunnerInstallation:
      installations:
      - name: "SonarQube"
        properties:
        - installSource:
            installers:
            - sonarRunnerInstaller:
                id: "4.6.2.2472"
