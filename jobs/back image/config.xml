<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1145.v7f2433caa07f">
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.coravy.hudson.plugins.github.GithubProjectProperty plugin="github@1.34.1">
      <projectUrl>https://github.com/Nazar802/demo3.git/</projectUrl>
      <displayName></displayName>
    </com.coravy.hudson.plugins.github.GithubProjectProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.6">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit></paramsToUseForLimit>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers>
        <com.cloudbees.jenkins.GitHubPushTrigger plugin="github@1.34.1">
          <spec></spec>
        </com.cloudbees.jenkins.GitHubPushTrigger>
      </triggers>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2648.va9433432b33c">
    <script>throttle([&apos;Lock&apos;]) {
    node {
        try {
            stage (&apos;Scm checkout&apos;) {
                git branch: &apos;backImage&apos;, url: &apos;https://github.com/Nazar802/demo3.git&apos;
            }
            
            withSonarQubeEnv (&apos;SonarQube&apos;) {
                stage (&apos;Mvn Package&apos;) {
                    def mvnHome = tool name: &apos;Maven&apos;, type: &apos;maven&apos;
                    def mvnCMD = &quot;${mvnHome}/bin/mvn&quot;
                    sh &quot;${mvnCMD} clean package sonar:sonar&quot;
                }
            }
            
            stage(&quot;Quality Gate&quot;){
                timeout(time: 1, unit: &apos;HOURS&apos;) {
                    def qg = waitForQualityGate()
                        if (qg.status != &apos;OK&apos;) {
                            sh  (&quot;&quot;&quot;
                            curl -s -X POST https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage -d chat_id=${CHAT_ID} -d parse_mode=markdown -d text=&apos;Fucking slaves! Rewrite the code. Quality gate for backend failed&apos;
                            &quot;&quot;&quot;)
                    }
                }
            } 
            
            stage (&apos;Docker Build&apos;) {
                def dockerHome = tool name: &apos;Docker&apos;, type: &apos;dockerTool&apos;
                def dockerCMD = &quot;${dockerHome}/bin/docker&quot;
                sh &quot;${dockerCMD} build . -t ${ACR_ADDR}/backend:latest&quot;
            }
                
            stage (&apos;Docker Push&apos;) {
                def dockerHome = tool name: &apos;Docker&apos;, type: &apos;dockerTool&apos;
                def dockerCMD = &quot;${dockerHome}/bin/docker&quot;
                sh &quot;${dockerCMD} login ${ACR_ADDR} -u${ACR_UID} -p${ACR_PASS}&quot;
                sh &quot;${dockerCMD} push ${ACR_ADDR}/backend:latest&quot;
            }
            
            withCredentials([string(credentialsId: &apos;chatID&apos;, variable: &apos;notif&apos;)]) {
                sh  (&quot;&quot;&quot;
                curl -s -X POST https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage -d chat_id=${CHAT_ID} -d parse_mode=markdown -d text=&apos;Oh Yeah! Back Image job succeeded&apos;
                &quot;&quot;&quot;)
            }
        }
        catch (e) {
            withCredentials([string(credentialsId: &apos;chatID&apos;, variable: &apos;notif&apos;)]) {
                sh  (&quot;&quot;&quot;
                curl -s -X POST https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage -d chat_id=${CHAT_ID} -d parse_mode=markdown -d text=&quot;Fuck You! Back Image job failed&quot;
                &quot;&quot;&quot;)
            }
            throw e
        }
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>
