<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1145.v7f2433caa07f">
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.coravy.hudson.plugins.github.GithubProjectProperty plugin="github@1.34.1">
      <projectUrl>https://github.com/Nazar802/demo3.git/</projectUrl>
      <displayName></displayName>
    </com.coravy.hudson.plugins.github.GithubProjectProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.6">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit></paramsToUseForLimit>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers>
        <jenkins.triggers.ReverseBuildTrigger>
          <spec></spec>
          <upstreamProjects>frontend</upstreamProjects>
          <threshold>
            <name>SUCCESS</name>
            <ordinal>0</ordinal>
            <color>BLUE</color>
            <completeBuild>true</completeBuild>
          </threshold>
        </jenkins.triggers.ReverseBuildTrigger>
        <com.cloudbees.jenkins.GitHubPushTrigger plugin="github@1.34.1">
          <spec></spec>
        </com.cloudbees.jenkins.GitHubPushTrigger>
      </triggers>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2648.va9433432b33c">
    <script>throttle([&apos;Lock&apos;]) {
    node {
        try {
            def remote = [:]
            
            withCredentials([sshUserPrivateKey(credentialsId: &apos;ssh&apos;, keyFileVariable: &apos;file&apos;, passphraseVariable: &apos;pass&apos;, usernameVariable: &apos;user&apos;)]) {
                remote.identityFile = file
                remote.name = &apos;ingress&apos;
                remote.host = &quot;${VMIP}&quot;
                remote.user = &apos;azureuser&apos;
                remote.allowAnyHosts = true    
                
                stage (&apos;Cleanup&apos;) {
                    writeFile file: &apos;cleanup.sh&apos;, text:
                    &quot;rm -rf ingress\nkubectl delete ing teachua-ingress || true&quot;
                    sshScript remote: remote, script: &quot;cleanup.sh&quot;
                }
        
                stage (&apos;Scm checkout&apos;) {
                    git branch: &apos;ingress&apos;, url: &apos;https://github.com/Nazar802/demo3.git&apos;
                    sshCommand remote: remote, command: &quot;cd ~ &amp;&amp; git clone --branch ingress https://github.com/Nazar802/demo3.git ingress&quot;
                }
                
                stage (&apos;Kubectl apply&apos;) {
                    writeFile file: &apos;start.sh&apos;, text:
                    &quot;kubectl apply -f ~/ingress/ingress.yaml&quot;
                    sshScript remote: remote, script: &quot;start.sh&quot;
                }
            }
            withCredentials([string(credentialsId: &apos;chatID&apos;, variable: &apos;notif&apos;)]) {
                sh  (&quot;&quot;&quot;
                curl -s -X POST https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage -d chat_id=${CHAT_ID} -d parse_mode=markdown -d text=&quot; Ingress job succeeded. Infrastructure is deployed.\nGo to http://teachua.centralus.cloudapp.azure.com/&quot;
                &quot;&quot;&quot;)
            }
        }
        catch (e) {
            withCredentials([string(credentialsId: &apos;chatID&apos;, variable: &apos;notif&apos;)]) {
                sh  (&quot;&quot;&quot;
                curl -s -X POST https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage -d chat_id=${CHAT_ID} -d parse_mode=markdown -d text=&quot; Ingress job failed&quot;
                &quot;&quot;&quot;)
            }
            throw e
        }
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>